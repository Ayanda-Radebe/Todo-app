// Step 1: Initialize the React Project
// Create a new React project using `create-react-app`.
// Set up the project structure with folders: components, assets, styles.

// Step 2: Set Up State Management in App Component
function App() 
    // Step 2.1: Initialize state variables
    const [tasks, setTasks] = useState([]); // Array to store tasks
    const [currentTask, setCurrentTask] = useState(null); // Object for the task being edited
    const [isEditing, setIsEditing] = useState(false); // Boolean to track editing mode
    const [filter, setFilter] = useState({ date: '', priority: '', status: '' }); // Filters for tasks

    // Step 2.2: Load tasks from localStorage on initial render
    useEffect(() => {
        loadTasksFromStorage();
    }, []);

    // Step 6: Manage Local Storage
    function loadTasksFromStorage() {
        const storedTasks = JSON.parse(localStorage.getItem('tasks'));
        if (storedTasks) setTasks(storedTasks);
    }

    useEffect(() => {
        saveTasksToStorage();
    }, [tasks]);

    function saveTasksToStorage() {
        localStorage.setItem('tasks', JSON.stringify(tasks));
    }

    // Step 3: TaskForm Component Logic
    function handleInputChange(event) {
        const { name, value } = event.target;
        setCurrentTask({ ...currentTask, [name]: value });
    }

    function handleSubmit(event) {
        event.preventDefault();

        if (isEditing) {
            // Update existing task
            const updatedTasks = tasks.map(task =>
                task.id === currentTask.id ? currentTask : task
            );
            setTasks(updatedTasks);
            setIsEditing(false);
        } else {
            // Add new task
            const newTask = {
                ...currentTask,
                id: Date.now(), // Generate a unique ID
                status: 'Incomplete' // Default status for new tasks
            };
            setTasks([...tasks, newTask]);
        }

        setCurrentTask(null); // Clear form
    }

    function handleCancelEdit() {
        setCurrentTask(null); // Clear form
        setIsEditing(false); // Exit edit mode
    }

    // Step 4: TaskList Component Logic
    function handleDelete(taskId) {
        const updatedTasks = tasks.filter(task => task.id !== taskId);
        setTasks(updatedTasks);
    }

    function handleEdit(taskId) {
        const taskToEdit = tasks.find(task => task.id === taskId);
        setCurrentTask(taskToEdit);
        setIsEditing(true);
    }

    function handleMarkAsCompleted(taskId) {
        const updatedTasks = tasks.map(task =>
            task.id === taskId ? { ...task, status: 'Complete' } : task
        );
        setTasks(updatedTasks);
    }

    // Step 5: Filter Tasks
    function handleFilterChange(event) {
        const { name, value } = event.target;
        setFilter({ ...filter, [name]: value });
    }

    function getFilteredTasks() {
        return tasks.filter(task =>
            (filter.date ? task.dueDate === filter.date : true) &&
            (filter.priority ? task.priority === filter.priority : true) &&
            (filter.status ? task.status === filter.status : true)
        );
    }

    // Step 7: TaskItem Component Logic
    function handleEditClick(taskId) {
        handleEdit(taskId); // Trigger edit mode for selected task
    }

    function handleDeleteClick(taskId) {
        handleDelete(taskId); // Trigger delete for selected task
    }

    function handleMarkCompleteClick(taskId) {
        handleMarkAsCompleted(taskId); // Mark task as completed
    }

    // Step 8: Notifications (Optional)
    function showNotification(message, type) {
        // Display notification (success or error)
        // Hide notification after a few seconds
    }

    // Step 9: Ensure Responsiveness
    // Use CSS media queries to handle different screen sizes

    // Step 10: Finalize and Test
    // Test CRUD operations, filter functionality, and data persistence
    // Verify responsiveness and user experience


// Step 11: Deployment
// Push final code to GitHub and deploy the app using a hosting service